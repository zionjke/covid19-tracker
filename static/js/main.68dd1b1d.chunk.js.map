{"version":3,"sources":["dal/api.js","components/InfoBox.js","utils/utils.js","components/Map.js","components/Table.js","components/Linegraph.js","App.js","serviceWorker.js","index.js"],"names":["instanse","axios","create","baseURL","api","get","then","r","data","countryCode","InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sort","a","b","prettyPrintStat","stat","numeral","format","Mapa","countries","center","zoom","casesType","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","radius","Math","sqrt","fillOpacity","Popup","style","backgroundImage","flag","showDataOnMap","Table","index","key","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineGraph","useState","setData","buildChartData","lastDataPoint","charData","date","newDataPoint","x","y","push","useEffect","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","onCountryChange","e","target","console","log","name","iso2","sortedData","getCountries","FormControl","Select","onChange","variant","MenuItem","todayCases","todayRecovered","todayDeaths","Linegraph","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wXAEMA,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,oCAKAC,EAAM,WAEX,OAAOJ,EAASK,IAAI,aAAaC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SAFxCJ,EAAM,SAKDK,GACV,OAAOT,EAASK,IAAII,GAAaH,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SANxCJ,EAAM,WAUX,OAAOJ,EAASK,IAAI,OAAOC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SAVlCJ,EAAM,WAcX,OAAQJ,EAASK,IAAI,+BAA+BC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,S,4CCCzDE,EAlBC,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAMC,EAAwC,EAAxCA,MAAMC,EAAkC,EAAlCA,OAAOC,EAA2B,EAA3BA,MAAMC,EAAqB,EAArBA,MAAUC,EAAW,0DAC5D,OACI,gBAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QACfC,UAAS,kBAAaN,GAAU,oBAAvB,YAA8CC,GAAS,iBAClE,gBAACM,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCX,GAEL,sBAAIQ,UAAS,0BAAqBL,GAAS,0BAA4BF,GACvE,gBAACS,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBACxCP,EADL,a,sECVVQ,EAAkB,CACpBX,MAAO,CACHY,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,MAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,MAIPG,EAAW,SAACpB,GAErB,OADgB,YAAOA,GACLqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAElB,MAAQmB,EAAEnB,OAAS,EAAI,MAGjDoB,EAAkB,SAACC,GAC7B,OAAQA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MCPxCC,EAZF,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,UAAUC,EAA2B,EAA3BA,OAAOC,EAAoB,EAApBA,KAAKC,EAAe,EAAfA,UACjC,OACI,uBAAKrB,UAAU,OACZ,gBAAC,IAAD,CAAYmB,OAAQA,EAAQC,KAAMA,GAC9B,gBAACE,EAAA,EAAD,CAAWC,IAAI,qDACJC,YAAY,2EDkBT,SAACnC,GAAD,IAAOgC,EAAP,uDAAmB,QAAnB,OAC3BhC,EAAKoC,KAAI,SAAAC,GAAO,OACV,kBAACC,EAAA,EAAD,CAAQR,OAAQ,CAACO,EAAQE,YAAYC,IAAIH,EAAQE,YAAYE,MACrD3B,MAAOC,EAAgBiB,GAAWhB,IAClC0B,UAAW3B,EAAgBiB,GAAWhB,IACtC2B,OACIC,KAAKC,KAAKR,EAAQL,IAAcjB,EAAgBiB,GAAWf,WAE/D6B,YAAa,IACjB,kBAACC,EAAA,EAAD,KACI,yBAAKpC,UAAU,kBACX,yBAAKA,UAAU,uBAAuBqC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAC9D,yBAAKvC,UAAU,wBAAwB0B,EAAQA,SAC/C,yBAAK1B,UAAU,6BAAf,UAAmDe,IAAQW,EAAQjC,OAAOuB,OAAO,QACjF,yBAAKhB,UAAU,6BAAf,cAAuDe,IAAQW,EAAQnB,WAAWS,OAAO,QACzF,yBAAKhB,UAAU,0BAAf,WAAiDe,IAAQW,EAAQlB,QAAQQ,OAAO,cChCpFwB,CAActB,EAAUG,MCOzBoB,G,OAdD,SAAC,GAAiB,IAAhBvB,EAAe,EAAfA,UACZ,OACI,uBAAKlB,UAAU,SAEPkB,EAAUO,KAAI,SAACC,EAASgB,GAAV,OACV,sBAAIC,IAAKD,GACL,0BAAKhB,EAAQA,SACb,0BAAI,8BAASX,IAAQW,EAAQjC,OAAOuB,OAAO,gB,QCL7D4B,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,MAAO,CACHhB,OAAQ,IAGhBiB,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAalE,GAC1B,OAAO0B,IAAQwC,EAAYC,OAAOxC,OAAO,WAIrDyC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACF5C,OAAQ,WACR6C,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPjB,SAAS,GAEbkB,MAAO,CACHC,SAAU,SAAUT,EAAOd,EAAOwB,GAC9B,OAAOnD,IAAQyC,GAAOxC,OAAO,YA8DtCmD,EApDG,SAAC,GAAmC,IAAD,IAAjC9C,iBAAiC,MAAvB,QAAuB,EAAfrB,EAAe,EAAfA,UAAe,EACzBoE,mBAAS,IADgB,mBAC1C/E,EAD0C,KACpCgF,EADoC,KAG3CC,EAAiB,SAACjF,GAA+B,IAE/CkF,EAFsBlD,EAAwB,uDAAZ,QAChCmD,EAAW,GAGjB,IAAK,IAAIC,KAAQpF,EAAKI,MAAO,CACzB,GAAI8E,EAAe,CACf,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGvF,EAAKgC,GAAWoD,GAAQF,GAE/BC,EAASK,KAAKH,GAElBH,EAAgBlF,EAAKgC,GAAWoD,GAEpC,OAAOD,GAcX,OAXAM,qBAAU,YACS,uCAAG,8BAAAnE,EAAA,sEACK1B,IADL,OACRI,EADQ,OAEVmF,EAAWF,EAAejF,EAAMgC,GACpCgD,EAAQG,GAHM,2CAAH,qDAKfO,KAED,CAAC1D,IAIA,uBAAKrB,UAAWA,GACXX,GAAQA,EAAK2F,OAAS,GACnB,gBAAC,OAAD,CAAM3F,KAAM,CACR4F,SAAU,CACN,CACIC,gBAAiB,sBACjBC,YAAa,SACb9F,KAAMA,KAMZuD,QAASA,M,OCchBwC,MAjGf,WAAgB,IAAD,EAEuBhB,mBAAS,IAFhC,mBAEJlD,EAFI,KAEOmE,EAFP,OAGmBjB,mBAAS,aAH5B,mBAGJ1C,EAHI,KAGK4D,EAHL,OAI2BlB,mBAAS,IAJpC,mBAIJxC,EAJI,KAIS2D,EAJT,OAKuBnB,mBAAS,IALhC,mBAKJoB,EALI,KAKOC,EALP,OAMuBrB,mBAAS,CAACvC,IAAI,UAAW6D,IAAI,YANpD,mBAMJC,EANI,KAMOC,EANP,OAOmBxB,mBAAS,GAP5B,mBAOJyB,EAPI,KAOKC,EAPL,OAQ6B1B,mBAAS,IARtC,mBAQJ2B,EARI,KAQUC,EARV,OASuB5B,mBAAS,SAThC,mBASJ/C,EATI,KASO4E,EATP,KAWLC,EAAe,uCAAG,WAAOC,GAAP,iBAAAxF,EAAA,6DACdY,EAAyB,cAAnB4E,EAAEC,OAAO5C,MACf,MADM,oBAEO2C,EAAEC,OAAO5C,OAHR,SAKDvE,EAAkBsC,GALjB,OAKdlC,EALc,OAMpBiG,EAAWa,EAAEC,OAAO5C,OACpB+B,EAAelG,GACfuG,EAAa,CAACvG,EAAKuC,YAAYC,IAAIxC,EAAKuC,YAAYE,OACpDgE,EAAW,GATS,2CAAH,sDAiCrB,OAtBAO,QAAQC,IAAI5E,GAEZoD,qBAAU,WACN7F,IAAuBE,MAAK,SAAAE,GAAI,OAAIkG,EAAelG,QACrD,IAEFyF,qBAAU,YACY,uCAAG,gCAAAnE,EAAA,sEACE1B,IADF,OACXI,EADW,OAEX6B,EAAY7B,EAAKoC,KAAI,SAAAC,GAAO,MAAK,CACnC6E,KAAM7E,EAAQA,QACd8B,MAAO9B,EAAQE,YAAY4E,SAGzBC,EAAahG,EAASpB,GAC5BoG,EAAagB,GACbpB,EAAanE,GACb8E,EAAgB3G,GAVC,2CAAH,qDAYlBqH,KACD,IAGC,yBAAK1G,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACX,gDACA,kBAAC2G,EAAA,EAAD,CAAa3G,UAAU,iBACnB,kBAAC4G,EAAA,EAAD,CAAQC,SAAUX,EAAiBY,QAAQ,WAAWtD,MAAO9B,GACzD,kBAACqF,EAAA,EAAD,CAAUvD,MAAM,aAAhB,aAEItC,EAAUO,KAAI,SAACC,EAASgB,GAAV,OACV,kBAACqE,EAAA,EAAD,CAAUpE,IAAKD,EAAOc,MAAO9B,EAAQ8B,OAAQ9B,EAAQ6E,YAOzE,yBAAKvG,UAAU,cACX,kBAAC,EAAD,CAASN,OAAsB,UAAd2B,EACR1B,OAAK,EACLI,QAAU,SAAAoG,GAAC,OAAIF,EAAa,UAC5BzG,MAAM,oBACNI,MAAOgC,EAAYnC,MACnBA,MAAOoB,EAAgBe,EAAYoF,cAC5C,kBAAC,EAAD,CAAStH,OAAsB,cAAd2B,EACRtB,QAAU,SAAAoG,GAAC,OAAIF,EAAa,cAC5BzG,MAAM,YACNI,MAAOgC,EAAYrB,UACnBd,MAAOoB,EAAgBe,EAAYqF,kBAC5C,kBAAC,EAAD,CAASvH,OAAsB,WAAd2B,EACR1B,OAAK,EACLI,QAAU,SAAAoG,GAAC,OAAIF,EAAa,WAC5BzG,MAAM,SACNI,MAAOgC,EAAYpB,OACnBf,MAAOoB,EAAgBe,EAAYsF,gBAEhD,kBAAC,EAAD,CAAK/F,OAAQwE,EACRtE,UAAWA,EACXH,UAAW6E,EACX3E,KAAMyE,KAEf,kBAAC/F,EAAA,EAAD,CAAME,UAAU,cACZ,kBAACC,EAAA,EAAD,KACI,qDACA,kBAAC,EAAD,CAAOiB,UAAWsE,IAClB,wBAAIxF,UAAU,mBAAd,iBAA+CqB,GAC3C,kBAAC8F,EAAD,CAAWnH,UAAU,aAAaqB,UAAWA,QC7FjD+F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5I,MAAK,SAAA6I,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.68dd1b1d.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instanse = axios.create({\r\n    baseURL: \"https://disease.sh/v3/covid-19/\"\r\n})\r\n\r\n\r\n\r\nexport const api = {\r\n    allCountriesData() {\r\n        return instanse.get('countries').then(r => r.data)\r\n    },\r\n\r\n    countriesData(countryCode) {\r\n        return instanse.get(countryCode).then(r => r.data)\r\n    },\r\n\r\n    allCountriesInfo() {\r\n        return instanse.get('all').then(r => r.data)\r\n    },\r\n\r\n    historyData() {\r\n        return  instanse.get('historical/all?lastdays=120').then(r => r.data)\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport '../scss/InfoBox.scss'\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {CardContent, Typography} from \"@material-ui/core\";\r\n\r\nconst InfoBox = ({title,cases,active,isRed,total, ...props}) => {\r\n    return (\r\n        <Card onClick={props.onClick}\r\n              className={`infobox ${active && 'infobox--selected'} ${isRed && 'infobox--red'}`}>\r\n            <CardContent>\r\n                <Typography className=\"indobox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infobox__cases ${!isRed && 'infobox__cases--green'}`}>{cases}</h2>\r\n                <Typography className=\"infobox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default InfoBox","import React from \"react\";\r\nimport numeral from \"numeral\"\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data]\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1)\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => {\r\n   return  stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\"\r\n}\r\n\r\n// Рисуем круги на карте\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n  data.map(country => (\r\n        <Circle center={[country.countryInfo.lat,country.countryInfo.long]}\r\n                color={casesTypeColors[casesType].hex}\r\n                fillColor={casesTypeColors[casesType].hex}\r\n                radius={\r\n                    Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n                }\r\n                fillOpacity={0.4}>\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-container__flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }}/>\r\n                    <div className=\"info-container__name\">{country.country}</div>\r\n                    <div className=\"info-container__confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-container__recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-container__deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n  ) )\r\n);\r\n","import * as React from 'react';\r\nimport '../scss/Map.scss'\r\nimport {Map as LeafletMap,TileLayer} from \"react-leaflet\";\r\nimport {showDataOnMap} from \"../utils/utils\";\r\n\r\n\r\nconst Mapa = ({countries,center,zoom,casesType}) => {\r\n    return (\r\n        <div className=\"map\">\r\n           <LeafletMap center={center} zoom={zoom} >\r\n               <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                          attribution='&copy; <a href=\"http://osm.org.copyright\">OpenStreetMap</a> contributors'/>\r\n               {showDataOnMap(countries,casesType)}\r\n           </LeafletMap>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mapa","import * as React from 'react';\r\nimport '../scss/Table.scss'\r\nimport numeral from 'numeral'\r\n\r\n\r\nconst Table = ({countries}) => {\r\n    return (\r\n        <div className='table'>\r\n            {\r\n                countries.map((country, index) => (\r\n                    <tr key={index}>\r\n                        <td>{country.country}</td>\r\n                        <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n                    </tr>\r\n                ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table","import * as React from 'react';\r\nimport {useEffect, useState} from \"react\";\r\nimport {api} from \"../dal/api\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\"\r\nimport '../scss/App.scss'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\")\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n\r\n\r\n    }\r\n}\r\n\r\nconst LineGraph = ({casesType='cases',className}) => {\r\n    const [data, setData] = useState({});\r\n\r\n    const buildChartData = (data, casesType = 'cases') => {\r\n        const charData = []\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                charData.push(newDataPoint)\r\n            }\r\n            lastDataPoint = data[casesType][date]\r\n        }\r\n        return charData\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const data = await api.historyData()\r\n            let charData = buildChartData(data, casesType)\r\n            setData(charData)\r\n        }\r\n        fetchData()\r\n\r\n    }, [casesType])\r\n\r\n\r\n    return (\r\n        <div className={className}>\r\n            {data && data.length > 0 && (\r\n                <Line data={{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204,16,52,0.6)\",\r\n                            borderColor: \"CC1034\",\r\n                            data: data\r\n                        }\r\n                    ]\r\n\r\n\r\n                }}\r\n                      options={options}/>\r\n            )}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LineGraph","import React, {useEffect, useState} from 'react';\r\nimport './scss/App.scss';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {api} from \"./dal/api\";\r\nimport InfoBox from \"./components/InfoBox\";\r\nimport Map from \"./components/Map\";\r\nimport {CardContent} from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Table from \"./components/Table\";\r\nimport {prettyPrintStat, sortData} from \"./utils/utils\";\r\nimport Linegraph from \"./components/Linegraph\";\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\nfunction App() {\r\n\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState('worldwide');\r\n    const [countryInfo, setCountryInfo] = useState({});\r\n    const [tableData, setTableData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState({lat:50.450001, lng:30.523333});\r\n    const [mapZoom, setMapZoom] = useState(3);\r\n    const [mapCountries, setMapCountries] = useState([]);\r\n    const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n    const onCountryChange = async (e) => {\r\n        const url = e.target.value === 'worldwide'\r\n            ? 'all'\r\n            : `countries/${e.target.value}`\r\n\r\n        const data = await api.countriesData(url)\r\n        setCountry(e.target.value)\r\n        setCountryInfo(data)\r\n        setMapCenter([data.countryInfo.lat,data.countryInfo.long])\r\n        setMapZoom(4)\r\n    }\r\n    console.log(country)\r\n\r\n    useEffect(() => {\r\n        api.allCountriesInfo().then(data => setCountryInfo(data))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const getCountries = async () => {\r\n            const data = await api.allCountriesData()\r\n            const countries = data.map(country => ({\r\n                name: country.country,\r\n                value: country.countryInfo.iso2\r\n            }))\r\n\r\n            const sortedData = sortData(data)\r\n            setTableData(sortedData)\r\n            setCountries(countries)\r\n            setMapCountries(data)\r\n        }\r\n        getCountries()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"app__left\">\r\n                <div className=\"app__header\">\r\n                    <h1>COVID-19 TRACKER</h1>\r\n                    <FormControl className=\"app__dropdown\">\r\n                        <Select onChange={onCountryChange} variant='outlined' value={country}>\r\n                            <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n                            {\r\n                                countries.map((country, index) => (\r\n                                    <MenuItem key={index} value={country.value}>{country.name}</MenuItem>\r\n                                ))\r\n                            }\r\n\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className=\"app__stats\">\r\n                    <InfoBox active={casesType === 'cases'}\r\n                             isRed\r\n                             onClick={ e => setCasesType(\"cases\")}\r\n                             title=\"Coronavirus cases\"\r\n                             total={countryInfo.cases}\r\n                             cases={prettyPrintStat(countryInfo.todayCases)}/>\r\n                    <InfoBox active={casesType === 'recovered'}\r\n                             onClick={ e => setCasesType(\"recovered\")}\r\n                             title=\"Recovered\"\r\n                             total={countryInfo.recovered}\r\n                             cases={prettyPrintStat(countryInfo.todayRecovered)}/>\r\n                    <InfoBox active={casesType === 'deaths'}\r\n                             isRed\r\n                             onClick={ e => setCasesType(\"deaths\")}\r\n                             title=\"Deaths\"\r\n                             total={countryInfo.deaths}\r\n                             cases={prettyPrintStat(countryInfo.todayDeaths)}/>\r\n                </div>\r\n                <Map center={mapCenter}\r\n                     casesType={casesType}\r\n                     countries={mapCountries}\r\n                     zoom={mapZoom}/>\r\n            </div>\r\n            <Card className=\"app__right\">\r\n                <CardContent>\r\n                    <h3>Live Cases by Country</h3>\r\n                    <Table countries={tableData}/>\r\n                    <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\r\n                        <Linegraph className=\"app__graph\" casesType={casesType}/>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}